openapi: 3.0.0
info:
  title: E-Commerce API
  description: API for managing users, products, orders, and payments in an e-commerce system
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1  # Adjust URL as per your server configuration
paths:
  /signUp:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Bad request
  /login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '400':
          description: Bad request
  /logout:
    get:
      summary: Log out a user
      responses:
        '200':
          description: User logged out successfully
  /forgotPassword:
    post:
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent successfully
        '400':
          description: Bad request
  /password/reset/{token}:
    post:
      summary: Reset user password
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Bad request
  /products:
    get:
      summary: Get all products
      responses:
        '200':
          description: List of products retrieved successfully
  /product/{id}:
    get:
      summary: Get product details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product details retrieved successfully
        '400':
          description: Bad request
  /admin/product/add:
    post:
      summary: Add a new product (admin)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product added successfully
        '400':
          description: Bad request
  /admin/products:
    get:
      summary: Get all products (admin)
      responses:
        '200':
          description: List of products retrieved successfully
  /admin/product/{id}:
    put:
      summary: Update product details by ID (admin)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                photo:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product details updated successfully
        '400':
          description: Bad request
    delete:
      summary: Delete a product by ID (admin)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product deleted successfully
        '400':
          description: Bad request
  /order/create:
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '200':
          description: Order created successfully
        '400':
          description: Bad request
  /order/{id}:
    get:
      summary: Get order details by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order details retrieved successfully
        '400':
          description: Bad request
  /myorder:
    get:
      summary: Get logged-in user's orders
      responses:
        '200':
          description: List of user's orders retrieved successfully
        '400':
          description: Bad request
  /admin/orders:
    get:
      summary: Get all orders (admin)
      responses:
        '200':
          description: List of orders retrieved successfully
components:
  schemas:
    OrderCreate:
      type: object
      properties:
        shippingInfo:
          type: object
          properties:
            address:
              type: string
            city:
              type: string
            postalCode:
              type: string
            country:
              type: string
        orderItems:
          type: array
          items:
            type: object
            properties:
              product:
                type: string
              quantity:
                type: integer
        paymentInfo:
          type: object
          properties:
            amount:
              type: number
            method:
              type: string
        taxAmount:
          type: number
        totalAmount:
          type: number
